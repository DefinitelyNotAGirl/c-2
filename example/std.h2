/*
 * Created Date: Sunday July 23rd 2023
 * Author: Lilith
 * -----
 * Last Modified: Sunday July 23rd 2023 3:59:31 am
 * Modified By: Lilith (definitelynotagirl115169@gmail.com)
 * -----
 * Copyright (c) 2023-2023 DefinitelyNotAGirl@github
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
class u64 : primitive64;
class u32 : private primitive32;
class u16 : private primitive16;
class u8 : private primitive8;
primitiveMul_64 u64 multiply(u64,u64);
primitiveMul_64 u64 operator*(u64,u64);
primitiveDiv_64 u64 operator/(u64,u64);
primitivesub_64 u64 operator-(u64,u64);
primitiveAdd_64 u64 operator+(u64,u64);
primitiveMul_A_64 void operator*=(u64,u64);
primitiveDiv_A_64 void operator/=(u64,u64);
primitivesub_A_64 void operator-=(u64,u64);
primitiveAdd_A_64 void operator+=(u64,u64);
primitiveEqual_64 bool operator==(u64,u64);
primitiveInc_64 void operator++(u64);
primitiveDec_64 void operator--(u64);
primitiveAssign_64_64 operator u64(u64);
primitiveAssign_64_32 operator u64(u32);
primitiveAssign_64_16 operator u64(u16);
primitiveAssign_64_8 operator u64(u8);
